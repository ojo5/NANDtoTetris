#include "verilated.h"
#include "Valu.h" // This is the header file generated by Verilator
#include <iostream>

int main(int argc, char **argv) {
    Verilated::commandArgs(argc, argv);

    // Create a simulation instance of the top module
    Valu* top = new Valu;

    // Apply test inputs
    top->A = 15; // 8'b00001111 in decimal
    top->B = 1;  // 8'b00000001 in decimal
    top->ALU_Sel = 0; // Addition
    top->eval();
    std::cout << "Addition: A=" << (int)top->A 
              << ", B=" << (int)top->B 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << ", CarryOut=" << (int)top->CarryOut 
              << std::endl;

    // Test Subtraction
    top->ALU_Sel = 1; // Subtraction
    top->eval();
    std::cout << "Subtraction: A=" << (int)top->A 
              << ", B=" << (int)top->B 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << ", CarryOut=" << (int)top->CarryOut 
              << std::endl;

    // Test Multiplication
    top->ALU_Sel = 2; // Multiplication
    top->eval();
    std::cout << "Multiplication: A=" << (int)top->A 
              << ", B=" << (int)top->B 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << ", CarryOut=" << (int)top->CarryOut 
              << std::endl;

    // Test Division
    top->ALU_Sel = 3; // Division
    top->eval();
    std::cout << "Division: A=" << (int)top->A 
              << ", B=" << (int)top->B 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << ", CarryOut=" << (int)top->CarryOut 
              << std::endl;

    // Test Logical Shift Left
    top->ALU_Sel = 4; // Shift Left
    top->eval();
    std::cout << "Logical Shift Left: A=" << (int)top->A 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << std::endl;

    // Test Logical Shift Right
    top->ALU_Sel = 5; // Shift Right
    top->eval();
    std::cout << "Logical Shift Right: A=" << (int)top->A 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << std::endl;

    // Test Rotate Left
    top->ALU_Sel = 6; // Rotate Left
    top->eval();
    std::cout << "Rotate Left: A=" << (int)top->A 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << std::endl;

    // Test Rotate Right
    top->ALU_Sel = 7; // Rotate Right
    top->eval();
    std::cout << "Rotate Right: A=" << (int)top->A 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << std::endl;

    // Test Logical AND
    top->ALU_Sel = 8; // AND
    top->eval();
    std::cout << "Logical AND: A=" << (int)top->A 
              << ", B=" << (int)top->B 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << std::endl;

    // Test Logical OR
    top->ALU_Sel = 9; // OR
    top->eval();
    std::cout << "Logical OR: A=" << (int)top->A 
              << ", B=" << (int)top->B 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << std::endl;

    // Test Logical XOR
    top->ALU_Sel = 10; // XOR
    top->eval();
    std::cout << "Logical XOR: A=" << (int)top->A 
              << ", B=" << (int)top->B 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << std::endl;

    // Test Logical NOR
    top->ALU_Sel = 11; // NOR
    top->eval();
    std::cout << "Logical NOR: A=" << (int)top->A 
              << ", B=" << (int)top->B 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << std::endl;

    // Test Logical NAND
    top->ALU_Sel = 12; // NAND
    top->eval();
    std::cout << "Logical NAND: A=" << (int)top->A 
              << ", B=" << (int)top->B 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << std::endl;

    // Test Logical XNOR
    top->ALU_Sel = 13; // XNOR
    top->eval();
    std::cout << "Logical XNOR: A=" << (int)top->A 
              << ", B=" << (int)top->B 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << std::endl;

    // Test Greater Comparison
    top->ALU_Sel = 14; // Greater
    top->eval();
    std::cout << "Greater Comparison: A=" << (int)top->A 
              << ", B=" << (int)top->B 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << std::endl;

    // Test Equal Comparison
    top->ALU_Sel = 15; // Equal
    top->eval();
    std::cout << "Equal Comparison: A=" << (int)top->A 
              << ", B=" << (int)top->B 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << std::endl;

    // Additional extra test case
    top->A = 5;    // A = 5
    top->B = 5;   // B = 5
    top->ALU_Sel = 15; // Equal Comparison
    top->eval();
    std::cout << "Extra Equality Test: A=" << (int)top->A 
              << ", B=" << (int)top->B 
              << ", ALU_Out=" << (int)top->ALU_Out 
              << std::endl;

    // Finish simulation
    delete top;
    return 0;
}